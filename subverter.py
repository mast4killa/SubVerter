#!/usr/bin/env python3
from __future__ import annotations

"""
SubVerter â€” Context-aware subtitle translation using AI.

CLI entry point â€” minimal logic here:
- Parses command-line arguments.
- Dispatches to:
    â€¢ subverter_lib/installers.py â†’ install() / uninstall()
    â€¢ subverter_lib/pipeline.py   â†’ run_pipeline()

# ============================================================
# ðŸ“‚ Project Structure
# ============================================================
subverter/
â”œâ”€â”€ subverter.py                # CLI entry point â€” just parses args & dispatches
â”‚
â”œâ”€â”€ subverter_lib/                         # All reusable logic lives here
â”‚   â”œâ”€â”€ __init__.py              # Empty for now (marks this as a package)
â”‚   â”œâ”€â”€ config_manager.py        # Load/save/validate config.json
â”‚   â”œâ”€â”€ installers.py            # install() / uninstall() registry helpers
â”‚   â”œâ”€â”€ lang_utils.py            # Language code normalization & filtering
â”‚   â”œâ”€â”€ llm_adapter.py           # Model-agnostic LLM interface (Ollama + stubs)
â”‚   â”œâ”€â”€ mkv_utils.py             # MKV probing, extraction, track selection
â”‚   â”œâ”€â”€ pipeline.py              # run_pipeline() â€” orchestrates the workflow
â”‚   â”œâ”€â”€ prompt_utils.py          # Builds context-aware translation prompts
â”‚   â”œâ”€â”€ reformat.py              # Soft-wrap & reformat subtitles
â”‚   â”œâ”€â”€ srt_utils.py             # Parse SRT, detect language, build blocks
â”‚   â””â”€â”€ translator.py            # Block-wise translation & fallback logic
â”‚
â”œâ”€â”€ cfg/
â”‚   â””â”€â”€ config.json              # User-editable configuration
â”‚   â””â”€â”€ copilot_storage.json     # TODO: I still have to describe this one!! HELP ME
â”‚
â”œâ”€â”€ requirements.txt             # Python dependencies
â”œâ”€â”€ README.md                    # Project documentation

# ============================================================
# ðŸ”— Import Map
# ============================================================
subverter.py
 â”œâ”€ subverter_lib.installers.install / uninstall
 â””â”€ subverter_lib.pipeline.run_pipeline
      â”œâ”€ subverter_lib.config_manager.load_config
      â”œâ”€ subverter_lib.lang_utils.normalize_lang_code
      â”œâ”€ subverter_lib.srt_utils.detect_language_from_srt / parse_srt
      â”œâ”€ subverter_lib.mkv_utils.select_mkv_subtitle
      â”œâ”€ subverter_lib.llm_adapter.LLMAdapter / LLMConfig
      â”œâ”€ subverter_lib.translator.translate_entries_with_context
      â””â”€ subverter_lib.reformat.reformat_subtitle_text
"""

import argparse
from pathlib import Path

from subverter_lib.installers import install, uninstall
from subverter_lib.pipeline import run_pipeline


def main() -> None:
    """
    Parse command-line arguments and run the appropriate action.
    """
    parser = argparse.ArgumentParser(
        description="SubVerter â€” Context-aware subtitle translation using AI"
    )
    parser.add_argument(
        "files",
        nargs="*",
        type=Path,
        help="One or more .srt or .mkv files to process"
    )
    parser.add_argument(
        "--install",
        action="store_true",
        help="Install right-click context menu entry"
    )
    parser.add_argument(
        "--uninstall",
        action="store_true",
        help="Uninstall right-click context menu entry"
    )
    parser.add_argument(
        "-v", "--verbose",
        action="count",
        default=0,
        help="Increase output verbosity (can be used multiple times: -v, -vv, -vvv)"
    )

    args = parser.parse_args()

    if args.install:
        install()
        return
    if args.uninstall:
        uninstall()
        return
    if not args.files:
        parser.print_help()
        return

    # Pass verbosity level into the pipeline
    run_pipeline(args.files, verbosity=args.verbose)


if __name__ == "__main__":
    main()
    print("\nâœ… Done. You can close this window.")